# Project 4: A Scheme Interpreter

In this project, you will develop an interpreter for a subset of the Scheme language. As you proceed, think about the issues that arise in the design of a programming language; many quirks of languages are byproducts of implementation decisions in interpreters and compilers. The subset of the language used in this project is described in the functional programming (http://composingprograms.com/pages/32-functional-programming.html) section of Composing Programs. Since we only include a subset of the language, your interpreter will not exactly match the behavior of other interpreters.

You will also implement some small programs in Scheme. Scheme is a simple but powerful functional language. You should find that much of what you have learned about Python transfers cleanly to Scheme as well as to other programming languages.
The project concludes with an open-ended graphics contest that challenges you to produce recursive images in only a few lines of Scheme. As an example, the picture above abstractly depicts all the ways of making change for $0.50 using U.S. currency. All flowers appear at the end of a branch with length 50. Small angles in a branch indicate an additional coin, while large angles indicate a new currency denomination. In the contest, you too will have the chance to unleash your inner recursive artist.
   
This project includes several files, but all of your changes will be made to the first four: 

scheme.py : the Scheme evaluator
scheme_reader.py : the Scheme syntactic analyzer
questions.scm : a collection of functions written in Scheme 
tests.scm : a collection of test cases written in Scheme 

The starter code contains the following files:

scheme_tokens.py : a tokenizer for Scheme 
scheme_primitives.py : definitions for primitive Scheme 
procedures buffer.py : a Buffer implementation, used in scheme_reader.py 

## Parts I and II
You will develop the interpreter in several stages:
Reading Scheme expressions Symbol evaluation
Calling built-in procedures Definitions
Lambda expressions and procedure definition Calling user-defined procedures
Evaluation of special forms

## In Part III
You will implement Scheme procedures.
